// *****************************************************************************
/*!
  \file      src/Inciter/transporter.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019-2020 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for Transporter
  \details   Charm++ module interface file for Transporter
*/
// *****************************************************************************

module transporter {

  include "Types.hpp";

  extern module meshwriter;

  namespace inciter {

    chare [migratable] Transporter {
      entry Transporter();
      entry [reductiontarget] void load( std::size_t nelem );
      entry [reductiontarget] void distributed();
      entry [reductiontarget] void refinserted( int error );
      entry [reductiontarget] void discinserted();
      entry [reductiontarget] void disccreated( std::size_t npoin );
      entry [reductiontarget] void workinserted();
      entry [reductiontarget] void queriedRef();
      entry [reductiontarget] void respondedRef();
      entry [reductiontarget] void compatibility( int modified );
      entry [reductiontarget] void matched( std::size_t nextra,
                                            std::size_t nref,
                                            std::size_t nderef,
                                            std::size_t initial );
      entry [reductiontarget] void bndint( tk::real sx,
                                           tk::real sy,
                                           tk::real sz,
                                           tk::real cb );
      entry [reductiontarget] void refined( std::size_t nelem,
                                            std::size_t npoin );
      entry [reductiontarget] void resized();
      entry [reductiontarget] void startEsup();
      entry [reductiontarget] void queried();
      entry [reductiontarget] void responded();
      entry [reductiontarget] void comfinal( int initial );
      entry [reductiontarget] void totalvol( tk::real v, tk::real initial );
      entry [reductiontarget] void minstat( tk::real d0, tk::real d1,
                                            tk::real d2);
      entry [reductiontarget] void maxstat( tk::real d0, tk::real d1,
                                            tk::real d2 );
      entry [reductiontarget] void sumstat( tk::real d0, tk::real d1,
                                            tk::real d2, tk::real d3,
                                            tk::real d4, tk::real d5 );
      entry [reductiontarget] void pdfstat( CkReductionMsg* msg );
      entry [reductiontarget] void boxvol( tk::real v );
      entry [reductiontarget] void diagnostics( CkReductionMsg* msg );
      entry void resume();
      entry [reductiontarget] void checkpoint( int finished );
      entry [reductiontarget] void finish();

      entry void pepartitioned();
      entry void pedistributed();
      entry void chbnd();
      entry void chcomm();
      entry void chmask();
      entry void chreordered();

      entry void chcreated();
      entry void chbndface();
      entry void chcomfac();
      entry void chghost();
      entry void chadj();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4stat() {
        when minstat_complete(), maxstat_complete(), sumstat_complete(),
             pdfstat_complete() serial "stat" { stat(); } };

      entry void minstat_complete();
      entry void maxstat_complete();
      entry void sumstat_complete();
      entry void pdfstat_complete();
    }

  } // inciter::

}
