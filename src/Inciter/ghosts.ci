// *****************************************************************************
/*!
  \file      src/Inciter/ghosts.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019-2021 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface for generating Ghost data structures
  \details   Charm++ module interface file for asynchronous generation of
             Ghost data structures.
  \see       Ghosts.[ch]pp for more info.
*/
// *****************************************************************************

module ghosts {

  extern module discretization;

  include "FaceData.hpp";

  namespace inciter {

    array [1D] Ghosts {
      entry Ghosts( const CProxy_Discretization& disc,
        const std::map< int, std::vector< std::size_t > >& bface,
        const std::vector< std::size_t >& triinpoel,
        std::size_t nunk,
        CkCallback cbDone );

      entry void startCommSetup();
      entry void resizeComm();
      entry void comfac( int fromch, const tk::UnsMesh::FaceSet& infaces );
      entry void comGhost( int fromch, const GhostData& ghost );
      entry void reqGhost();
      entry void nodeNeighSetup();
      entry void comEsup( int fromch,
        const std::unordered_map< std::size_t, std::vector< std::size_t > >&
          bndEsup,
        const std::unordered_map< std::size_t, std::vector< tk::real > >&
          nodeBoundaryCells );

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4fac() {
        when ownfac_complete(), comfac_complete() serial "bndfaces"
        { bndFaces(); } }

      entry void wait4ghost() {
        when ownghost_complete(), reqghost_complete() serial "ghost"
        { sendGhost(); } }

      entry void wait4esup() {
        when ownesup_complete(), comesup_complete() serial "esup"
        { adj(); } }

      entry void ownfac_complete();
      entry void comfac_complete();
      entry void ownghost_complete();
      entry void reqghost_complete();
      entry void ownesup_complete();
      entry void comesup_complete();

    };

  } // inciter::

}
